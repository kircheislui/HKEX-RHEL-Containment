---
- name: Create backup directory
  file:
    path: "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}"
    state: directory

- name: Check if iptables backup exists
  stat:
    path: "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}/iptables"
  register: backup_check
  failed_when: backup_check.stat.exists

- name: Check if iptables config file exists
  stat:
    path: "/etc/sysconfig/iptables"
  register: iptables_config_check

- name: Backup existing iptables configuration from file
  copy:
    src: "/etc/sysconfig/iptables"
    dest: "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}/iptables"
    remote_src: yes
  when: iptables_config_check.stat.exists

- name: Backup current iptables ruleset if no config file exists
  shell: iptables-save > "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}/iptables"
  when: not iptables_config_check.stat.exists

- name: Generate iptables configuration
  template:
    src: "iptables/{{ profile | lower }}.j2"
    dest: "/etc/sysconfig/iptables"
    mode: '0600'

- name: Apply iptables rules
  service:
    name: iptables
    state: restarted
  register: iptables_result

- name: Verify iptables ruleset
  shell: iptables -L -n
  register: iptables_verify
  changed_when: false

- name: Verify outgoing traffic to verification_list
  shell: "ping -c 4 {{ item }}"
  loop: "{{ verification_list }}"
  register: ping_result
  failed_when: ping_result.rc != 0
  when: verification_list | length > 0

- name: Fallback on failure
  block:
    - name: Restore iptables from backup
      copy:
        src: "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}/iptables"
        dest: "/etc/sysconfig/iptables"
        remote_src: yes

    - name: Restart iptables after restore
      service:
        name: iptables
        state: restarted

    - name: Remove backup on failure
      file:
        path: "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}"
        state: absent
  when:
    - iptables_result is defined
    - iptables_result.failed or (ping_result is defined and (ping_result.results | selectattr('failed', 'equalto', true) | list | length > 0))