---
- name: Create backup directory
  file:
    path: "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}"
    state: directory

- name: Check if nftables backup exists
  stat:
    path: "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}/nftables.conf"
  register: backup_check
  failed_when: backup_check.stat.exists

- name: Check if nftables config file exists
  stat:
    path: "/etc/sysconfig/nftables.conf"
  register: nftables_config_check

- name: Backup existing nftables configuration from file
  copy:
    src: "/etc/sysconfig/nftables.conf"
    dest: "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}/nftables.conf"
    remote_src: yes
  when: nftables_config_check.stat.exists

- name: Backup current nftables ruleset if no config file exists
  shell: nft list ruleset > "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}/nftables.conf"
  when: not nftables_config_check.stat.exists

- name: Generate nftables configuration
  template:
    src: "nftables/{{ profile | lower }}.j2"
    dest: "/etc/sysconfig/nftables.conf"
    mode: '0600'

- name: Apply nftables rules
  service:
    name: nftables
    state: restarted
  register: nftables_result
  ignore_errors: yes  # Don't stop on error, continue to verify and fallback if needed

- name: Verify nftables ruleset
  shell: nft list ruleset
  register: nftables_verify
  changed_when: false
  ignore_errors: yes

# Using block/rescue for the verification process
- block:
    # Copy the verification script to the remote host
    - name: Copy verification script
      copy:
        src: "files/port_verifier.py"
        dest: "{{ backup_path }}/port_verifier.py"
        mode: '0755'
      when: verification_list | length > 0

    - name: Verify connectivity based on verification list
      command: "{{ backup_path }}/port_verifier.py '{{ verification_list | to_json }}'"
      register: verification_results
      changed_when: false
      when: verification_list | length > 0
      # We don't use failed_when here since we handle failure in the rescue block

    - name: Set verification status
      set_fact:
        verification_failed: "{{ verification_results.rc != 0 }}"
      when: verification_list | length > 0 and verification_results is defined

    - name: Display verification results
      debug:
        var: verification_results.stdout | from_json
      when: verification_list | length > 0 and verification_results is defined

    - name: Fail if verification failed
      fail:
        msg: "Verification failed: One or more connectivity checks did not match expected results"
      when: verification_list | length > 0 and verification_failed | bool
      
  rescue:
    - name: Display failed verification details
      debug:
        msg: "Verification failed: Connectivity checks did not match expected results"
      
    - name: Set verification failed flag
      set_fact:
        verification_failed: true

  when: verification_list | length > 0

# Final status checking and fallback if needed
- name: Check for failures
  set_fact:
    containment_failed: "{{ (nftables_result is defined and nftables_result.failed) or 
                          (verification_failed is defined and verification_failed | bool) }}"

- name: Display final status
  debug:
    msg: "{{ 'Containment FAILED - will restore previous configuration' if containment_failed | bool else 'Containment SUCCESSFUL' }}"

- name: Fallback on failure
  block:
    - name: Restore nftables from backup
      copy:
        src: "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}/nftables.conf"
        dest: "/etc/sysconfig/nftables.conf"
        remote_src: yes

    - name: Restart nftables after restore
      service:
        name: nftables
        state: restarted

    - name: Remove backup on failure
      file:
        path: "{{ backup_path }}/{{ profile }}-{{ ansible_date_time.date }}"
        state: absent
        
    - name: Verification after restore
      debug:
        msg: "Original configuration has been restored. Please verify manually that connectivity is working correctly."
  when: containment_failed | bool