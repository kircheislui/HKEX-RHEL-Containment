---
- name: Determine inventory of hosts in limit
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    tower_host: "{{ tower_host }}"
    tower_token: "{{ tower_token }}"

  tasks:
    - name: Get limit hosts from extra vars
      set_fact:
        limit_hosts: "{{ limit.split(',') if limit is string else limit }}"
      
    - name: Retrieve all hosts from AAP
      uri:
        url: "{{ tower_host }}/api/v2/hosts/"
        method: GET
        headers:
          Authorization: "Bearer {{ tower_token }}"
        validate_certs: false
      register: hosts_response
      
    - name: Extract host data
      set_fact:
        all_hosts: "{{ hosts_response.json.results }}"
      
    - name: Map hosts to their inventories
      set_fact:
        host_inventory_map: >-
          {{ host_inventory_map | default({}) | combine({item.name: {
             'id': item.summary_fields.inventory.id,
             'name': item.summary_fields.inventory.name
          }}) }}
      loop: "{{ all_hosts }}"
      
    - name: Find matched hosts in limit
      set_fact:
        matched_hosts: "{{ all_hosts | selectattr('name', 'in', limit_hosts) | list }}"
      
    - name: Debug matched hosts
      debug:
        var: matched_hosts
      
    - name: Fail if no hosts found
      fail:
        msg: "No hosts found matching limit: {{ limit_hosts | join(', ') }}"
      when: matched_hosts | length == 0
      
    - name: Extract inventory details for matched hosts
      set_fact:
        inventory_list: "{{ matched_hosts | map(attribute='summary_fields.inventory') | list }}"
      
    - name: Debug inventory list
      debug:
        var: inventory_list
      
    - name: Get unique inventory IDs
      set_fact:
        unique_inventory_ids: "{{ inventory_list | map(attribute='id') | unique | list }}"
      
    - name: Fail if multiple inventories found
      fail:
        msg: "Hosts are in different inventories: {{ inventory_list | map(attribute='name') | join(', ') }}"
      when: unique_inventory_ids | length > 1
    
    - name: Set matched inventory
      set_fact:
        matched_inventory_id: "{{ unique_inventory_ids[0] }}"
        matched_inventory_name: "{{ inventory_list[0].name }}"
      
    - name: Retrieve inventory details
      uri:
        url: "{{ tower_host }}/api/v2/inventories/{{ matched_inventory_id }}/"
        method: GET
        headers:
          Authorization: "Bearer {{ tower_token }}"
        validate_certs: false
      register: inventory_details
      
    - name: Determine OS type from inventory name
      set_fact:
        os_type: >-
          {% if 'RHEL 9' in matched_inventory_name %}
          rhel9
          {% elif 'RHEL 8' in matched_inventory_name %}
          rhel8
          {% elif 'RHEL 7' in matched_inventory_name %}
          rhel7
          {% else %}
          unknown
          {% endif %}
        
    - name: Output matched inventory and OS type
      debug:
        msg: 
          - "Matched inventory for {{ limit_hosts | join(', ') }}: {{ matched_inventory_name }} (ID: {{ matched_inventory_id }})"
          - "Determined OS type: {{ os_type }}"
        
    - name: Set workflow artifacts
      set_stats:
        data:
          matched_inventory_name: "{{ matched_inventory_name }}"
          matched_inventory_id: "{{ matched_inventory_id }}"
          os_type: "{{ os_type }}"
          # 以下變數可在工作流其他模板中使用
          target_hosts: "{{ limit_hosts | join(',') }}"
          inventory: "{{ matched_inventory_id }}"
          # 增加這個變數使其與 main.yml 兼容
          ansible_distribution_major_version: >-
            {% if 'rhel9' in os_type %}9
            {% elif 'rhel8' in os_type %}8
            {% elif 'rhel7' in os_type %}7
            {% else %}unknown
            {% endif %}
          # 保留原始的 extra_vars 變數以保持一致
          containment_action: "{{ containment_action | default('containment') }}"
          profile: "{{ profile | default('FULL') }}"
          outbound_whitelist: "{{ outbound_whitelist | default([]) }}"
          inbound_whitelist: "{{ inbound_whitelist | default([]) }}"
          verification_list: "{{ verification_list | default([]) }}"