---
- name: Determine inventory of hosts in limit
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    tower_host: "{{ tower_host }}"
    tower_token: "{{ tower_token }}"
    rhel9_job_template_id: 7
    rhel8_job_template_id: 10
    rhel7_job_template_id: 11

    job_launch_delay: 2

    # Multiple AAP server IPs
    aap_ips:
      - 192.168.1.38
    
    # Multiple DNS server IPs
    dns_ips:
      - 192.168.1.1

  tasks:
    - name: Get limit hosts from extra vars
      set_fact:
        limit_hosts: "{{ limit.split(',') if limit is string else limit }}"
    
    # More efficient method when the limit hosts list is of reasonable size
    - name: Check if we can use direct filtering
      set_fact:
        use_direct_filtering: "{{ limit_hosts | length <= 50 }}"
    
    - name: Use direct API filtering when limit hosts count is reasonable
      uri:
        url: "{{ tower_host }}/api/v2/hosts/?name__in={{ limit_hosts | join(',') }}&page_size=200"
        method: GET
        headers:
          Authorization: "Bearer {{ tower_token }}"
        validate_certs: false
      register: filtered_hosts_response
      when: use_direct_filtering
    
    # If direct filtering can't be used, use more efficient pagination approach
    - name: Initialize for pagination approach
      set_fact:
        all_hosts: []
        page_size: 200
      when: not use_direct_filtering
    
    - name: Get first page and count
      uri:
        url: "{{ tower_host }}/api/v2/hosts/?page_size={{ page_size }}"
        method: GET
        headers:
          Authorization: "Bearer {{ tower_token }}"
        validate_certs: false
      register: first_page
      when: not use_direct_filtering
    
    - name: Calculate pages needed
      set_fact:
        total_pages: "{{ ((first_page.json.count | int) / page_size) | int + (1 if ((first_page.json.count | int) % page_size) > 0 else 0) }}"
        all_hosts: "{{ first_page.json.results }}"
      when: not use_direct_filtering and first_page is defined
    
    - name: Retrieve remaining pages in parallel
      uri:
        url: "{{ tower_host }}/api/v2/hosts/?page={{ item }}&page_size={{ page_size }}"
        method: GET
        headers:
          Authorization: "Bearer {{ tower_token }}"
        validate_certs: false
      register: page_responses
      with_sequence: start=2 end="{{ total_pages }}"
      when: not use_direct_filtering and total_pages | int > 1
      async: 60
      poll: 0
    
    - name: Wait for all page retrieval tasks to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: page_results
      until: page_results.finished
      retries: 30
      delay: 1
      loop: "{{ page_responses.results | default([]) }}"
      when: not use_direct_filtering and total_pages | int > 1 and item is defined and item.ansible_job_id is defined
    
    - name: Combine all pages
      set_fact:
        all_hosts: "{{ all_hosts + (item.json.results | default([])) }}"
      loop: "{{ page_results.results | default([]) }}"
      when: not use_direct_filtering and total_pages | int > 1 and item.json is defined
    
    # Consolidate results from either approach
    - name: Set final hosts list
      set_fact:
        all_hosts: "{{ filtered_hosts_response.json.results if use_direct_filtering else all_hosts }}"
    
    - name: Display host count
      debug:
        msg: "Retrieved {{ all_hosts | length }} hosts from the API using {{ 'direct filtering' if use_direct_filtering else 'efficient pagination' }}"
    
    - name: Map hosts to their inventories
      set_fact:
        host_inventory_map: >-
          {{ host_inventory_map | default({}) | combine({item.name: {
             'id': item.summary_fields.inventory.id,
             'name': item.summary_fields.inventory.name
          }}) }}
      loop: "{{ all_hosts }}"
    
    # If using full pagination approach, filter here
    - name: Find matched hosts in limit
      set_fact:
        matched_hosts: "{{ all_hosts | selectattr('name', 'in', limit_hosts) | list }}"
      when: not use_direct_filtering
    
    # If using direct filtering, all hosts are already matched
    - name: Use all hosts as matched when using direct filtering
      set_fact:
        matched_hosts: "{{ all_hosts }}"
      when: use_direct_filtering
    
    - name: Debug matched hosts
      debug:
        var: matched_hosts
    
    - name: Fail if no hosts found
      fail:
        msg: "No hosts found matching limit: {{ limit_hosts | join(', ') }}"
      when: matched_hosts | length == 0
    
    # Simpler approach using loop to create hosts_by_inventory
    - name: Initialize hosts_by_inventory
      set_fact:
        hosts_by_inventory: {}
        
    - name: Build inventory groups
      set_fact:
        hosts_by_inventory: >-
          {{ hosts_by_inventory | combine({
            (item.summary_fields.inventory.id | string): {
              'name': item.summary_fields.inventory.name,
              'hosts': hosts_by_inventory[item.summary_fields.inventory.id | string].hosts | default([]) + [item.name]
            }
          })}}
      loop: "{{ matched_hosts }}"
      
    - name: Display hosts grouped by inventory
      debug:
        var: hosts_by_inventory
      
    - name: Process each inventory group
      include_tasks: process_inventory_group.yml
      loop: "{{ hosts_by_inventory.keys() | list }}"
      loop_control:
        loop_var: inventory_id
        label: "{{ hosts_by_inventory[inventory_id].name }}"

    - name: Get consolidated host lists by OS type
      set_fact:
        rhel9_hosts: "{{ processed_inventories | selectattr('os_type', 'equalto', 'rhel9') | map(attribute='hosts') | flatten | join(',') }}"
        rhel8_hosts: "{{ processed_inventories | selectattr('os_type', 'equalto', 'rhel8') | map(attribute='hosts') | flatten | join(',') }}"
        rhel7_hosts: "{{ processed_inventories | selectattr('os_type', 'equalto', 'rhel7') | map(attribute='hosts') | flatten | join(',') }}"

    - name: Display consolidated host lists
      debug:
        msg:
          - "RHEL 9 hosts: {{ rhel9_hosts }}"
          - "RHEL 8 hosts: {{ rhel8_hosts }}"
          - "RHEL 7 hosts: {{ rhel7_hosts }}"

    - name: Launch RHEL 9 containment job
      uri:
        url: "{{ tower_host }}/api/v2/job_templates/{{ rhel9_job_template_id }}/launch/"
        method: POST
        headers:
          Authorization: "Bearer {{ tower_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          limit: "{{ rhel9_hosts }}"
          extra_vars:
            containment_action: "{{ containment_action | default('containment') }}"
            profile: "{{ profile | default('FULL') }}"
            outbound_whitelist: "{{ outbound_whitelist | default([]) }}"
            inbound_whitelist: "{{ inbound_whitelist | default([]) }}"
            verification_list: "{{ verification_list | default([]) }}"
            aap_ips: "{{ aap_ips }}"
            dns_ips: "{{ dns_ips }}"
        status_code: [200, 201, 202]
        validate_certs: no  # Set to 'yes' in production
      register: rhel9_job_response
      when: rhel9_hosts != ""

    - name: Pause before launching RHEL 8 job
      pause:
        seconds: "{{ job_launch_delay }}"
      when: rhel9_hosts != "" and rhel8_hosts != ""

    - name: Launch RHEL 8 containment job
      uri:
        url: "{{ tower_host }}/api/v2/job_templates/{{ rhel8_job_template_id }}/launch/"
        method: POST
        headers:
          Authorization: "Bearer {{ tower_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          limit: "{{ rhel8_hosts }}"
          extra_vars:
            containment_action: "{{ containment_action | default('containment') }}"
            profile: "{{ profile | default('FULL') }}"
            outbound_whitelist: "{{ outbound_whitelist | default([]) }}"
            inbound_whitelist: "{{ inbound_whitelist | default([]) }}"
            verification_list: "{{ verification_list | default([]) }}"
            aap_ips: "{{ aap_ips }}"
            dns_ips: "{{ dns_ips }}"
        status_code: [200, 201, 202]
        validate_certs: no  # Set to 'yes' in production
      register: rhel8_job_response
      when: rhel8_hosts != ""

    - name: Pause before launching RHEL 7 job
      pause:
        seconds: "{{ job_launch_delay }}"
      when: (rhel9_hosts != "" or rhel8_hosts != "") and rhel7_hosts != ""

    - name: Launch RHEL 7 containment job
      uri:
        url: "{{ tower_host }}/api/v2/job_templates/{{ rhel7_job_template_id }}/launch/"
        method: POST
        headers:
          Authorization: "Bearer {{ tower_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          limit: "{{ rhel7_hosts }}"
          extra_vars:
            containment_action: "{{ containment_action | default('containment') }}"
            profile: "{{ profile | default('FULL') }}"
            outbound_whitelist: "{{ outbound_whitelist | default([]) }}"
            inbound_whitelist: "{{ inbound_whitelist | default([]) }}"
            verification_list: "{{ verification_list | default([]) }}"
            aap_ips: "{{ aap_ips }}"
            dns_ips: "{{ dns_ips }}"            
        status_code: [200, 201, 202]
        validate_certs: no  # Set to 'yes' in production
      register: rhel7_job_response
      when: rhel7_hosts != ""

    - name: Display launched job information
      debug:
        msg:
          - "RHEL 9 job ID: {{ (rhel9_job_response.json.id | default('No job launched')) if rhel9_hosts != '' else 'No RHEL 9 hosts found' }}"
          - "RHEL 8 job ID: {{ (rhel8_job_response.json.id | default('No job launched')) if rhel8_hosts != '' else 'No RHEL 8 hosts found' }}"
          - "RHEL 7 job ID: {{ (rhel7_job_response.json.id | default('No job launched')) if rhel7_hosts != '' else 'No RHEL 7 hosts found' }}"