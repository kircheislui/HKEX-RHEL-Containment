---
- name: HKEX RHEL Containment Main Entry Point
  hosts: all
  gather_facts: yes
  become: true
  become_method: sudo
  vars:
    # Extra variables from API
    containment_action: "{{ containment_action }}"
    profile: "{{ profile | default('') }}"
    outbound_whitelist: "{{ outbound_whitelist | default([]) }}"
    hostnames: "{{ hostnames | default([]) }}"
    verification_list: "{{ verification_list | default([]) }}"
    # Process inventory information
    all_inventories_data: "{{ all_inventories | default({}) }}"
    processed_inventories: "{{ all_processed_inventories | default([]) }}"
    # Default variables
    backup_path: "/root/"
    
    # Initialize empty lists for whitelists
    default_inbound_whitelist: []
    default_outbound_whitelist: []

  pre_tasks:
    - name: Validate action variable
      fail:
        msg: "Action must be either 'containment' or 'resume'"
      when: containment_action not in ['containment', 'resume']
        
  tasks:
    # Generate inbound whitelist for AAP servers
    - name: Generate inbound whitelist for AAP servers
      set_fact:
        default_inbound_whitelist: "{{ default_inbound_whitelist + [{'ip': item, 'port': 22, 'protocol': 'tcp'}] }}"
      loop: "{{ aap_ips }}"
    
    # Generate outbound whitelist for DNS servers (TCP)
    - name: Generate outbound whitelist for DNS servers (TCP)
      set_fact:
        default_outbound_whitelist: "{{ default_outbound_whitelist + [{'ip': item, 'port': 53, 'protocol': 'tcp'}] }}"
      loop: "{{ dns_ips }}"
    
    # Generate outbound whitelist for DNS servers (UDP)
    - name: Generate outbound whitelist for DNS servers (UDP)
      set_fact:
        default_outbound_whitelist: "{{ default_outbound_whitelist + [{'ip': item, 'port': 53, 'protocol': 'udp'}] }}"
      loop: "{{ dns_ips }}"
    
    - name: Display generated whitelists
      debug:
        msg:
          - "Inbound whitelist: {{ default_inbound_whitelist }}"
          - "Outbound whitelist: {{ default_outbound_whitelist }}"

    - name: Run containment role
      include_role:
        name: containment
      when:
        - containment_action == 'containment'

    - name: Run Resume role
      include_role:
        name: resume
      when:
        - containment_action == 'resume'